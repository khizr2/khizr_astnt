<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Khizr Assistant</title>

<!-- External Stylesheets -->
<link rel="stylesheet" href="/css/main.css">
<link rel="stylesheet" href="/css/components.css">
<link rel="stylesheet" href="/css/animations.css">

<!-- Environment Configuration -->
<script>
    // Environment configuration - can be overridden by server
    window.API_BASE_URL = window.API_BASE_URL || (window.location.hostname === 'localhost' ? 'http://localhost:3000' : '');
</script>

</head>

animation: scaleIn 0.6s ease-out;
}

.chat-tabs {
display: flex;
border-bottom: 1px solid var(--border-glass);
background: var(--bg-glass-light);
backdrop-filter: blur(10px);
padding: 0 16px;
}

.chat-tab {
padding: 12px 20px;
border: none;
background: transparent;
color: var(--text-secondary);
cursor: pointer;
font-size: 12px;
font-family: inherit;
border-radius: 12px 12px 0 0;
transition: all var(--transition-normal);
position: relative;
overflow: hidden;
}

.chat-tab::before {
content: '';
position: absolute;
bottom: 0;
left: 50%;
width: 0;
height: 2px;
background: linear-gradient(90deg, var(--primary), #7C3AED);
transition: all var(--transition-normal);
transform: translateX(-50%);
}

.chat-tab.active {
color: var(--primary);
background: rgba(139, 92, 246, 0.1);
box-shadow: inset 0 -2px 4px rgba(0, 0, 0, 0.1);
}

.chat-tab.active::before {
width: 100%;
}

.chat-tab:hover:not(.active) {
color: var(--text-primary);
background: rgba(255, 255, 255, 0.05);
transform: translateY(-1px);
}

.chat-messages {
flex: 1;
padding: 20px;
overflow-y: auto;
display: flex;
flex-direction: column;
gap: 16px;
scrollbar-width: thin;
scrollbar-color: rgba(139, 92, 246, 0.3) transparent;
}

.chat-messages::-webkit-scrollbar {
width: 6px;
}

.chat-messages::-webkit-scrollbar-track {
background: transparent;
}

.chat-messages::-webkit-scrollbar-thumb {
background: rgba(139, 92, 246, 0.3);
border-radius: 3px;
}

.chat-messages::-webkit-scrollbar-thumb:hover {
background: rgba(139, 92, 246, 0.5);
}

.chat-message {
display: flex;
flex-direction: column;
max-width: 80%;
animation: fadeInUp 0.4s ease-out;
}

.chat-message.user {
align-self: flex-end;
}

.chat-message.assistant {
align-self: flex-start;
}

.message-content {
padding: 16px 20px;
border-radius: 16px;
font-size: 13px;
backdrop-filter: blur(10px);
position: relative;
overflow: hidden;
}

.chat-message.user .message-content {
background: linear-gradient(135deg, var(--primary) 0%, #7C3AED 100%);
color: white;
box-shadow: var(--shadow-soft);
}

.chat-message.user .message-content::before {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 50%);
pointer-events: none;
}

.chat-message.assistant .message-content {
background: var(--bg-glass);
border: 1px solid var(--border-glass);
color: var(--text-primary);
box-shadow: var(--shadow-glass);
}

.chat-message.assistant .message-content::before {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: linear-gradient(135deg, rgba(139, 92, 246, 0.05) 0%, transparent 50%);
pointer-events: none;
}

.message-time {
  font-size: 10px;
  color: var(--text-secondary);
  margin-top: 4px;
  padding: 0 4px;
}

/* Message Feedback */
.message-feedback {
  display: flex;
  gap: 4px;
  margin-top: 8px;
  margin-left: 16px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.chat-message:hover .message-feedback {
  opacity: 1;
}

.feedback-btn {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 14px;
  padding: 4px;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.feedback-btn:hover {
  background: rgba(139, 92, 246, 0.1);
  transform: scale(1.1);
}

.feedback-btn:active {
  transform: scale(0.95);
}

.chat-input-container {
padding: 20px;
border-top: 1px solid var(--border-glass);
display: flex;
gap: 12px;
background: var(--bg-glass-light);
backdrop-filter: blur(10px);
}

.chat-input {
flex: 1;
background: var(--bg-glass);
border: 1px solid var(--border-glass);
border-radius: 12px;
padding: 12px 16px;
color: var(--text-primary);
font-family: inherit;
font-size: 13px;
resize: none;
min-height: 20px;
max-height: 120px;
overflow-y: auto;
word-wrap: break-word;
white-space: pre-wrap;
line-height: 1.4;
backdrop-filter: blur(10px);
transition: all var(--transition-normal);
box-shadow: var(--shadow-soft);
}

.chat-input:focus {
outline: none;
border-color: var(--primary);
box-shadow: var(--shadow-soft), 0 0 20px rgba(139, 92, 246, 0.1);
transform: translateY(-1px);
}

.chat-send-btn {
background: linear-gradient(135deg, var(--primary) 0%, #7C3AED 100%);
border: none;
border-radius: 12px;
padding: 12px 20px;
color: white;
cursor: pointer;
font-size: 12px;
font-family: inherit;
font-weight: 500;
transition: all var(--transition-normal);
box-shadow: var(--shadow-soft);
position: relative;
overflow: hidden;
}

.chat-send-btn::before {
content: '';
position: absolute;
top: 0;
left: -100%;
width: 100%;
height: 100%;
background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
transition: left 0.5s;
}

.chat-send-btn:hover {
transform: translateY(-2px);
box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
}

.chat-send-btn:hover::before {
left: 100%;
}

.chat-send-btn:active {
transform: translateY(0);
box-shadow: var(--shadow-soft);
}

.chat-send-btn:disabled {
opacity: 0.5;
cursor: not-allowed;
transform: none;
box-shadow: var(--shadow-soft);
}

/* Approval Cards */
.approval-item {
background: rgba(245, 158, 11, 0.1);
border: 1px solid var(--warning);
border-radius: 6px;
padding: 16px;
margin-bottom: 12px;
}

.approval-header {
display: flex;
justify-content: between;
align-items: flex-start;
margin-bottom: 8px;
}

.approval-title {
font-weight: 600;
color: var(--warning);
font-size: 13px;
}

.approval-cost {
font-size: 11px;
color: var(--text-secondary);
}

.approval-description {
font-size: 12px;
color: var(--text-primary);
margin-bottom: 12px;
line-height: 1.4;
}

.approval-actions {
display: flex;
gap: 8px;
}

.approve-btn {
background: var(--success);
border: none;
border-radius: 4px;
padding: 6px 12px;
color: white;
cursor: pointer;
font-size: 11px;
font-family: inherit;
font-weight: 500;
transition: all 0.2s ease;
}

.reject-btn {
background: var(--secondary);
border: none;
border-radius: 4px;
padding: 6px 12px;
color: white;
cursor: pointer;
font-size: 11px;
font-family: inherit;
font-weight: 500;
transition: all 0.2s ease;
}

.approve-btn:hover, .reject-btn:hover {
opacity: 0.9;
}

/* Views */
.project-view, .mind-view, .chat-view, .emails-view, .goals-view, .insights-view, .approvals-view, .agents-view {
display: none;
}

.project-view.active, .mind-view.active, .chat-view.active, .emails-view.active, .goals-view.active, .insights-view.active, .approvals-view.active, .agents-view.active {
display: block;
}

/* Modern Neumorphic Project Cards */
.project-item {
background: var(--bg-glass);
border: 1px solid var(--border-glass);
border-radius: 16px;
padding: 20px;
margin-bottom: 16px;
cursor: pointer;
transition: all var(--transition-normal);
position: relative;
backdrop-filter: blur(10px);
box-shadow: var(--shadow-soft);
animation: fadeInUp 0.5s ease-out;
overflow: hidden;
}

.project-item::before {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: linear-gradient(135deg, rgba(139, 92, 246, 0.05) 0%, transparent 50%);
pointer-events: none;
border-radius: 16px;
}

.project-item:hover {
transform: translateY(-4px) scale(1.01);
border-color: rgba(139, 92, 246, 0.3);
box-shadow: var(--shadow-neumorph), 0 20px 40px rgba(139, 92, 246, 0.1);
background: rgba(139, 92, 246, 0.02);
}

.project-item:active {
transform: translateY(0) scale(0.99);
box-shadow: var(--shadow-neumorph-pressed);
}

.project-title {
font-size: 14px;
font-weight: 600;
color: var(--text-primary);
margin-bottom: 4px;
display: flex;
align-items: center;
justify-content: space-between;
}

.project-desc {
color: var(--text-secondary);
font-size: 12px;
}

.project-meta {
display: flex;
align-items: center;
gap: 8px;
margin-top: 8px;
font-size: 11px;
color: var(--text-secondary);
}

.project-priority {
padding: 2px 6px;
border-radius: 10px;
font-size: 10px;
font-weight: 500;
}

.project-priority.high {
background: var(--secondary);
color: white;
}

.project-priority.medium {
background: var(--warning);
color: white;
}

.project-priority.low {
background: var(--text-secondary);
color: white;
}

.project-actions {
display: flex;
gap: 4px;
opacity: 0;
transition: opacity 0.2s ease;
}

.project-item:hover .project-actions {
opacity: 1;
}

.project-action-btn {
background: none;
border: none;
color: var(--text-secondary);
cursor: pointer;
font-size: 14px;
padding: 4px;
border-radius: 4px;
transition: all 0.2s ease;
}

.project-action-btn:hover {
color: var(--primary);
background: rgba(139, 92, 246, 0.1);
}

/* Sort button styles */
.sort-btn {
background: none;
border: 1px solid var(--border);
border-radius: 4px;
width: 24px;
height: 24px;
display: flex;
align-items: center;
justify-content: center;
cursor: pointer;
font-size: 12px;
transition: all 0.2s ease;
opacity: 0.6;
}

.sort-btn:hover {
opacity: 1;
background: var(--bg-card);
border-color: var(--primary);
}

.sort-btn.active {
opacity: 1;
background: var(--primary);
border-color: var(--primary);
color: white;
}

/* Running Tasks Styles */
.running-task-item {
display: flex;
align-items: center;
gap: 8px;
padding: 6px 0;
border-bottom: 1px solid var(--border);
}

.running-task-item:last-child {
border-bottom: none;
}

.running-task-indicator {
font-size: 14px;
animation: spin 2s linear infinite;
}

@keyframes spin {
0% { transform: rotate(0deg); }
100% { transform: rotate(360deg); }
}

@keyframes fadeInUp {
0% {
  opacity: 0;
  transform: translateY(30px);
}
100% {
  opacity: 1;
  transform: translateY(0);
}
}

@keyframes scaleIn {
0% {
  opacity: 0;
  transform: scale(0.9);
}
100% {
  opacity: 1;
  transform: scale(1);
}
}

@keyframes shimmer {
0% { background-position: -200% 0; }
100% { background-position: 200% 0; }
}

@keyframes pulse {
0% { box-shadow: 0 0 0 0 rgba(139, 92, 246, 0.4); }
70% { box-shadow: 0 0 0 10px rgba(139, 92, 246, 0); }
100% { box-shadow: 0 0 0 0 rgba(139, 92, 246, 0); }
}

@keyframes float {
0%, 100% { transform: translateY(0px); }
50% { transform: translateY(-10px); }
}

@keyframes fadeIn {
0% { opacity: 0; }
100% { opacity: 1; }
}

@keyframes bounceIn {
0% {
  opacity: 0;
  transform: scale(0.3);
}
50% {
  opacity: 1;
  transform: scale(1.05);
}
70% {
  transform: scale(0.9);
}
100% {
  opacity: 1;
  transform: scale(1);
}
}

@keyframes slideInFromBottom {
0% {
  transform: translateY(100%);
  opacity: 0;
}
100% {
  transform: translateY(0);
  opacity: 1;
}
}

/* Loading shimmer effect */
@keyframes loading-shimmer {
0% { background-position: -200% 0; }
100% { background-position: 200% 0; }
}

.loading-shimmer {
background: linear-gradient(90deg, var(--bg-card) 25%, rgba(139, 92, 246, 0.1) 50%, var(--bg-card) 75%);
background-size: 200% 100%;
animation: loading-shimmer 1.5s infinite;
}

.running-task-info {
flex: 1;
}

.running-task-title {
font-size: 12px;
font-weight: 500;
color: var(--text-primary);
margin-bottom: 2px;
}

.running-task-status {
font-size: 10px;
color: var(--text-secondary);
}

/* Agent Dashboard Styles */
.agent-dashboard-grid {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
gap: 20px;
margin-bottom: 30px;
}

.dashboard-card {
background: var(--bg-glass);
border: 1px solid var(--border-glass);
border-radius: 16px;
padding: 24px;
backdrop-filter: blur(15px);
box-shadow: var(--shadow-glass);
transition: all var(--transition-normal);
animation: scaleIn 0.6s ease-out;
position: relative;
overflow: hidden;
}

.dashboard-card::before {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: linear-gradient(135deg, rgba(139, 92, 246, 0.08) 0%, transparent 60%);
pointer-events: none;
border-radius: 16px;
}

.dashboard-card:hover {
transform: translateY(-2px);
box-shadow: var(--shadow-glass), 0 15px 35px rgba(139, 92, 246, 0.15);
}

.dashboard-card h3 {
color: var(--text-accent);
font-size: 16px;
font-weight: 600;
margin-bottom: 20px;
margin-top: 0;
position: relative;
z-index: 2;
}

.agent-status-item {
display: flex;
align-items: center;
gap: 10px;
padding: 8px 0;
border-bottom: 1px solid var(--border);
}

.agent-status-item:last-child {
border-bottom: none;
}

.agent-indicator {
width: 8px;
height: 8px;
border-radius: 50%;
}

.agent-indicator.online {
background: var(--success);
}

.agent-indicator.busy {
background: var(--warning);
}

.agent-indicator.offline {
background: var(--text-secondary);
}

.agent-info {
flex: 1;
}

.agent-name {
font-size: 12px;
font-weight: 500;
color: var(--text-primary);
}

.agent-task {
font-size: 10px;
color: var(--text-secondary);
}

.agent-controls {
background: var(--bg-card);
border: 1px solid var(--border);
border-radius: 8px;
padding: 20px;
margin-top: 20px;
}

.agent-controls h3 {
color: var(--text-accent);
font-size: 14px;
font-weight: 600;
margin-bottom: 15px;
margin-top: 0;
}

.control-buttons {
display: flex;
gap: 10px;
flex-wrap: wrap;
}

/* Decision Tree Styles */
.decision-node {
background: var(--bg-card);
border: 1px solid var(--border);
border-radius: 6px;
padding: 10px;
margin: 5px 0;
font-size: 12px;
}

.decision-node.active {
border-color: var(--primary);
background: rgba(139, 92, 246, 0.05);
}

.decision-branch {
margin-left: 20px;
border-left: 2px solid var(--border);
padding-left: 10px;
}

/* Activity Styles */
.activity-item {
display: flex;
align-items: center;
gap: 10px;
padding: 8px 0;
border-bottom: 1px solid var(--border);
font-size: 12px;
}

.activity-item:last-child {
border-bottom: none;
}

.activity-time {
color: var(--text-secondary);
font-size: 10px;
}

.activity-description {
flex: 1;
color: var(--text-primary);
}

/* Metrics Styles */
.metric-item {
display: flex;
justify-content: space-between;
align-items: center;
padding: 8px 0;
border-bottom: 1px solid var(--border);
}

.metric-item:last-child {
border-bottom: none;
}

.metric-label {
font-size: 12px;
color: var(--text-secondary);
}

.metric-value {
font-size: 12px;
font-weight: 500;
color: var(--text-accent);
}

/* Glass Morphism Modals */
.modal-overlay {
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: rgba(0, 0, 0, 0.6);
backdrop-filter: blur(8px);
display: flex;
align-items: center;
justify-content: center;
z-index: 1000;
animation: fadeIn 0.3s ease-out;
}

.modal {
background: var(--bg-glass);
border: 1px solid var(--border-glass);
border-radius: 20px;
padding: 32px;
max-width: 500px;
width: 90%;
max-height: 80vh;
overflow-y: auto;
backdrop-filter: blur(20px);
box-shadow: var(--shadow-glass);
animation: scaleIn 0.4s ease-out;
position: relative;
overflow: hidden;
}

.modal::before {
content: '';
position: absolute;
top: 0;
left: 0;
right: 0;
bottom: 0;
background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, transparent 70%);
pointer-events: none;
border-radius: 20px;
}

.modal-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 20px;
}

.modal-title {
font-size: 14px;
font-weight: 600;
color: var(--text-primary);
}

.modal-close {
background: none;
border: none;
color: var(--text-secondary);
cursor: pointer;
font-size: 16px;
padding: 4px;
}

.modal-close:hover {
color: var(--primary);
}

.form-group {
margin-bottom: 16px;
}

.form-label {
display: block;
font-size: 12px;
font-weight: 500;
color: var(--text-accent);
margin-bottom: 6px;
}

.form-input, .form-textarea {
width: 100%;
background: transparent;
border: 1px solid var(--border);
border-radius: 4px;
padding: 8px 12px;
color: var(--text-primary);
font-family: inherit;
font-size: 13px;
}

.form-textarea {
resize: vertical;
min-height: 80px;
}

.form-input:focus, .form-textarea:focus {
outline: none;
border-color: var(--primary);
}

.form-buttons {
display: flex;
gap: 8px;
justify-content: flex-end;
margin-top: 20px;
}

.btn-secondary {
background: var(--bg-glass);
border: 1px solid var(--border-glass);
border-radius: 12px;
padding: 10px 18px;
color: var(--text-secondary);
cursor: pointer;
font-size: 12px;
font-family: inherit;
font-weight: 500;
transition: all var(--transition-normal);
backdrop-filter: blur(10px);
box-shadow: var(--shadow-soft);
position: relative;
overflow: hidden;
}

.btn-secondary::before {
content: '';
position: absolute;
top: 0;
left: -100%;
width: 100%;
height: 100%;
background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
transition: left var(--transition-normal);
}

.btn-secondary:hover {
border-color: var(--primary);
color: var(--primary);
transform: translateY(-2px);
box-shadow: var(--shadow-neumorph);
}

.btn-secondary:hover::before {
left: 100%;
}

.btn-primary {
background: linear-gradient(135deg, var(--primary) 0%, #7C3AED 100%);
border: none;
border-radius: 12px;
padding: 10px 18px;
color: white;
cursor: pointer;
font-size: 12px;
font-family: inherit;
font-weight: 500;
transition: all var(--transition-normal);
box-shadow: var(--shadow-soft);
position: relative;
overflow: hidden;
}

.btn-primary::before {
content: '';
position: absolute;
top: 0;
left: -100%;
width: 100%;
height: 100%;
background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
transition: left var(--transition-normal);
}

.btn-primary:hover {
transform: translateY(-2px);
box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
}

.btn-primary:hover::before {
left: 100%;
}

.btn-primary:active {
transform: translateY(0);
box-shadow: var(--shadow-soft);
}

/* Preference Modal Styles */
.preference-content {
  margin-top: 20px;
}

.preference-section {
  margin-bottom: 24px;
  padding-bottom: 16px;
  border-bottom: 1px solid var(--border);
}

.preference-section:last-child {
  border-bottom: none;
}

.preference-list {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.preference-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  background: var(--bg-card);
  border: 1px solid var(--border);
  border-radius: 6px;
}

.preference-name {
  font-size: 12px;
  font-weight: 500;
  color: var(--text-primary);
}

.preference-confidence {
  font-size: 11px;
  color: var(--text-secondary);
  background: rgba(139, 92, 246, 0.1);
  padding: 2px 6px;
  border-radius: 10px;
}

.preference-toggle {
  display: flex;
  align-items: center;
  gap: 8px;
}

.preference-toggle input[type="checkbox"] {
  width: 14px;
  height: 14px;
}

.preference-controls {
  display: flex;
  gap: 8px;
  justify-content: flex-end;
  margin-top: 16px;
}

/* Pattern Intelligence Styles */
.pattern-insights {
    padding: 15px;
}

.pattern-metric {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid var(--border);
}

.pattern-metric:last-child {
    border-bottom: none;
}

.metric-label {
    font-size: 13px;
    color: var(--text-secondary);
}

.metric-value {
    font-size: 13px;
    color: var(--text-accent);
    font-weight: 500;
}

/* Smart Suggestions Styles */
.suggestion-list {
    max-height: 200px;
    overflow-y: auto;
}

.suggestion-item {
    display: flex;
    align-items: center;
    padding: 10px;
    border-bottom: 1px solid var(--border);
    cursor: pointer;
    transition: background 0.2s ease;
}

.suggestion-item:hover {
    background: var(--bg-card);
}

.suggestion-item:last-child {
    border-bottom: none;
}

.suggestion-icon {
    margin-right: 10px;
    font-size: 16px;
}

.suggestion-text {
    flex: 1;
    font-size: 13px;
    color: var(--text-primary);
}

.suggestion-confidence {
    font-size: 11px;
    color: var(--text-secondary);
    background: var(--border);
    padding: 2px 6px;
    border-radius: 10px;
}

/* Daddy Controls Styles */
.daddy-controls {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
}

.btn-small {
    padding: 6px 12px;
    font-size: 11px;
    border: 1px solid var(--border);
    border-radius: 4px;
    background: var(--bg-card);
    color: var(--text-primary);
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-small:hover {
    background: var(--primary);
    color: white;
    border-color: var(--primary);
}

/* Badge Styles */
.badge {
    background: var(--primary);
    color: white;
    font-size: 10px;
    padding: 2px 6px;
    border-radius: 10px;
    margin-left: 8px;
}

/* Responsive */
@media (max-width: 768px) {
.container {
padding: 20px 16px;
}

.today-view {
grid-template-columns: 1fr;
gap: 32px;
}

.nav {
gap: 20px;
margin-bottom: 32px;
}

.header {
margin-bottom: 40px;
}

.chat-container {
height: 400px;
}

.modal {
width: 95%;
padding: 20px;
}
}
</style>
</head>
<body class="theme-purple">

<div class="container">
<!-- Header with Agent Status -->
<header class="header">
<div class="agent-status" id="agentStatus">
<div class="agent-indicator" id="browserAgent" title="Browser Agent"></div>
<div class="agent-indicator" id="coderAgent" title="Coder Agent"></div>
<div class="agent-indicator" id="pmAgent" title="PM Agent"></div>
<div class="agent-indicator" id="researchAgent" title="Research Agent"></div>
</div>

  <!-- Preference Indicators -->
  <div id="preferenceIndicators" class="preference-indicators">
    <!-- Dynamic preference badges will appear here -->
  </div>

  <div class="header-controls">
    <div class="theme-toggle">
      <button class="theme-btn purple active" onclick="setTheme('purple')"></button>
      <button class="theme-btn red" onclick="setTheme('red')"></button>
    </div>
    <button class="approvals-btn notification-badge" data-count="0" onclick="showView('approvals')" id="approvalsHeaderBtn" title="Approvals">
      🔔
    </button>
    <button class="preference-btn" onclick="showPreferenceModal()" title="Preference Settings">⚙️</button>
    <button class="logout-btn" onclick="logout()" title="Logout">🚪</button>
  </div>

  <!-- Daddy Agent Controls -->
  <div class="daddy-controls" style="margin-top: 10px;">
    <button class="btn btn-small" onclick="toggleDaddyMonitoring()" id="daddyToggle">
        👨‍👧 Toggle Daddy Mode
    </button>
    <button class="btn btn-small" onclick="showDaddyAnalytics()">
        📈 Analytics
    </button>
  </div>
</header>

<!-- Navigation -->
<nav class="nav">
<button class="nav-btn active" onclick="showView('today')">today</button>
<button class="nav-btn" onclick="showView('projects')">projects</button>
<button class="nav-btn" onclick="showView('goals')">goals</button>
<button class="nav-btn" onclick="showView('agents')">agents</button>
<button class="nav-btn" onclick="showView('chat')">ai chat</button>
<button class="nav-btn" onclick="showView('emails')">emails</button>
</nav>

<!-- Today View -->
<div id="today-view" class="today-view">
<div class="main-content">
<!-- Date Display -->
<div class="code-card">
<div class="section-header">today</div>
<div class="date-display" id="dateDisplay"></div>
</div>

<!-- Dynamic Tasks -->
<div class="code-card" id="tasksContainer">
<div class="section-header">
tasks
<button class="add-btn" onclick="showAddTaskModal()">+ add</button>
</div>
<ul class="task-list" id="tasksList">
<!-- Tasks will be loaded dynamically -->
</ul>
</div>

<!-- AI Input -->
<div class="code-card" style="background: transparent; border: none; box-shadow: none;">
<div class="section-header" style="color: var(--text-secondary); font-size: 11px;">quick process</div>
<div class="ai-input-container" style="border: none; padding: 0;">
<div class="ai-prompt" style="color: var(--text-secondary); font-size: 12px; margin-bottom: 8px;">tell me what's on your mind</div>
<textarea
class="ai-textarea"
placeholder="? research question | zz task | !! urgent | og preserve note"
id="aiNote"
style="border: 1px solid var(--border); background: var(--bg);"
></textarea>
<button class="ai-send-btn" onclick="processAINote()" style="background: var(--primary); color: white; border: none; font-size: 12px;">run</button>
</div>
</div>
</div>

<div class="sidebar">
<!-- Agent Status -->
<div class="code-card">
<div class="section-header">agents</div>
<div id="agentCards">
<!-- Agent status cards will be loaded here -->
</div>
</div>

<!-- Running Tasks -->
<div class="code-card">
<div class="section-header">running tasks</div>
<div id="runningTasks">
<!-- Currently running tasks will be loaded here -->
</div>
</div>

<!-- Time-bound Events -->
<div class="code-card">
<div class="section-header">timebound</div>
<ul class="time-list" id="timeEvents">
<!-- Calendar events will be loaded here -->
</ul>
</div>

<!-- Quick Actions -->
<div style="margin-top: 20px;">
<button class="mind-btn" onclick="showMindPage()" style="background: transparent; border: 1px solid var(--border); color: var(--text-primary); font-size: 13px; padding: 8px 16px; border-radius: 4px;">
 on my mind
</button>
</div>
</div>
</div>

<!-- Other Views -->
<div id="project-view" class="project-view">
<div class="code-card boxed">
<div class="section-header" style="display: flex; justify-content: space-between; align-items: center;">
<div style="display: flex; align-items: center; gap: 12px;">
<span>projects</span>
<!-- Sort Controls -->
<div class="sort-controls" style="display: flex; gap: 4px;">
<button class="sort-btn" onclick="sortProjects('name')" title="Sort by name" id="sortName">📝</button>
<button class="sort-btn" onclick="sortProjects('date')" title="Sort by date" id="sortDate">📅</button>
<button class="sort-btn" onclick="sortProjects('priority')" title="Sort by priority" id="sortPriority">⭐</button>
</div>
</div>
<button class="add-btn" onclick="showAddProjectModal()" title="New Project" style="background: var(--primary); border: none; border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; font-size: 16px; cursor: pointer;">+</button>
</div>
<div class="project-list" id="projectList">
<!-- Projects will be loaded dynamically -->
</div>
</div>
</div>

<!-- Approvals View -->
<div id="approvals-view" class="approvals-view">
<div class="code-card boxed">
<div class="section-header">approvals needed</div>
<div id="approvalsList">
<!-- Pending approvals will be loaded here -->
</div>
</div>
</div>

<div id="goals-view" class="goals-view">
<div class="code-card boxed">
<div class="section-header">goals</div>
<p>Goals tracking coming soon...</p>
</div>
</div>

<!-- AI Agent Dashboard -->
<div id="agents-view" class="agents-view">
<div class="code-card boxed">
<div class="section-header">🤖 AI Agent Dashboard</div>

<!-- Agent Status Overview -->
<div class="agent-dashboard-grid">
<div class="dashboard-card">
<h3>Agent Status</h3>
<div id="agentStatusOverview">
<!-- Agent status will be loaded here -->
</div>
</div>

<div class="dashboard-card">
<h3>Decision Tree</h3>
<div id="decisionTree">
<!-- Decision tree visualization will be loaded here -->
</div>
</div>

<div class="dashboard-card">
<h3>Recent Activity</h3>
<div id="agentActivity">
<!-- Agent activity history will be loaded here -->
</div>
</div>

<div class="dashboard-card">
<h3>Performance Metrics</h3>
<div id="agentMetrics">
<!-- Performance metrics will be loaded here -->
</div>
</div>
</div>

<!-- Agent Control Panel -->
<div class="agent-controls">
<h3>Agent Controls</h3>
<div class="control-buttons">
<button class="btn-primary" onclick="refreshAgentStatus()">🔄 Refresh Status</button>
<button class="btn-secondary" onclick="showAgentAnalytics()">📊 Analytics</button>
<button class="btn-secondary" onclick="showDaddyControls()">👨‍👧 Daddy Controls</button>
</div>
</div>
</div>
</div>

<div id="mind-view" class="mind-view">
<div class="code-card boxed">
<div class="section-header">on my mind</div>
<textarea
id="mindInput"
class="mind-textarea"
placeholder="Share your thoughts, ideas, concerns..."
></textarea>
<button class="mind-save-btn" onclick="saveMindNote()">save thought</button>
</div>
</div>

  <!-- AI Chat View -->
<div id="chat-view" class="chat-view">
<div class="code-card boxed">
<div class="section-header">ai chat</div>
<div class="chat-container">
<div class="chat-tabs">
<button class="chat-tab active" onclick="switchChatTab('main')">Main</button>
<button class="chat-tab" onclick="switchChatTab('tasks')">Tasks</button>
<button class="chat-tab" onclick="switchChatTab('projects')">Projects</button>
<button class="chat-tab" onclick="switchChatTab('research')">Research</button>
</div>
<div class="chat-messages" id="chatMessages">
<!-- Chat history will be loaded here -->
</div>
<div class="chat-input-container">
  <!-- Add AI model selector -->
  <div class="ai-model-selector" style="margin-bottom: 8px; display: flex; align-items: center; gap: 8px;">
    <label for="aiModel" style="font-size: 11px; color: var(--text-secondary);">AI Model:</label>
    <select id="aiModel" style="padding: 4px 8px; border: 1px solid var(--border); border-radius: 4px; background: var(--bg-card); color: var(--text-primary); font-size: 12px;">
      <!-- Free Models - DeepSeek Family -->
      <optgroup label="🔥 FREE - DeepSeek (Best Reasoning)">
        <option value="deepseek/deepseek-r1:free">DeepSeek R1 0528 (Best Reasoning)</option>
        <option value="deepseek/deepseek-v3-0324:free">DeepSeek V3 0324 (Balanced)</option>
        <option value="tng/deepseek-r1t2-chimera:free">DeepSeek R1T2 Chimera (Fast Reasoning)</option>
        <option value="deepseek/deepseek-r1">DeepSeek R1 (Open Source)</option>
        <option value="deepseek/deepseek-v3.1">DeepSeek V3.1 (Hybrid)</option>
      </optgroup>

      <!-- Free Models - Other Providers -->
      <optgroup label="🆓 FREE - Other Providers">
        <option value="z-ai/glm-4.5-air:free">GLM 4.5 Air (Agent Focused)</option>
        <option value="qwen/qwen3-coder-480b-a35b:free">Qwen3 Coder 480B (Code Expert)</option>
        <option value="tng/deepseek-r1t-chimera:free">DeepSeek R1T Chimera (Efficient)</option>
        <option value="moonshotai/kimi-k2:free">Kimi K2 (MoE Expert)</option>
      </optgroup>

      <!-- Premium Models -->
      <optgroup label="💎 PREMIUM - Paid Models">
        <option value="anthropic/claude-3.5-sonnet">Claude 3.5 Sonnet (Best Quality)</option>
        <option value="anthropic/claude-3-haiku">Claude 3 Haiku (Fast & Cheap)</option>
        <option value="openai/gpt-4o">GPT-4o (Latest OpenAI)</option>
        <option value="openai/gpt-4o-mini">GPT-4o Mini (Cheapest)</option>
        <option value="google/gemini-pro-1.5">Gemini Pro 1.5 (Google)</option>
        <option value="meta-llama/llama-3.1-70b-instruct">Llama 3.1 70B (Open Source)</option>
        <option value="mistralai/mistral-large">Mistral Large (Capable)</option>
      </optgroup>
    </select>
  </div>

<textarea
class="chat-input"
id="chatInput"
placeholder="Type your message or use prefixes: ? zz og !!"
onkeypress="handleChatKeyPress(event)"
oninput="autoResizeTextarea(this)"
></textarea>
<button class="chat-send-btn" id="chatSendBtn" onclick="sendChatMessage()">Send</button>
</div>
</div>
</div>
</div>

<!-- Email View -->
<div id="emails-view" class="emails-view">
<div class="code-card boxed">
<div class="section-header">emails</div>
<div class="emails-controls" style="margin-bottom: 20px;">
<button class="btn-primary" onclick="connectGmail()" id="gmailConnectBtn">
Connect Gmail
</button>
<button class="btn-secondary" onclick="refreshEmails()" id="refreshEmailsBtn" style="display:none;">
Refresh
</button>
<span id="emailStatus" style="margin-left: 12px; font-size: 11px; color: var(--text-secondary);"></span>
</div>
<div class="emails-list" id="emailsList">
<p>Click "Connect Gmail" to start managing your emails...</p>
</div>
</div>
</div>

</div>

<!-- Add Task Modal -->
<div id="addTaskModal" class="modal-overlay" style="display: none;">
<div class="modal">
<div class="modal-header">
<h3 class="modal-title">Add New Task</h3>
<button class="modal-close" onclick="closeModal('addTaskModal')">×</button>
</div>
<form onsubmit="submitTask(event)">
<div class="form-group">
<label class="form-label">Task Title</label>
<input type="text" class="form-input" id="taskTitle" required>
</div>
<div class="form-group">
<label class="form-label">Priority</label>
<select class="form-input" id="taskPriority">
<option value="normal">Normal</option>
<option value="urgent">Urgent</option>
<option value="low">Low</option>
</select>
</div>
<div class="form-group">
<label class="form-label">Assign To</label>
<select class="form-input" id="taskAssignTo">
<option value="human">Me</option>
<option value="browser_agent">Browser Agent</option>
<option value="coder_agent">Coder Agent</option>
<option value="pm_agent">PM Agent</option>
<option value="researcher_agent">Research Agent</option>
</select>
</div>
<div class="form-group">
<label class="form-label">Description (optional)</label>
<textarea class="form-textarea" id="taskDescription" placeholder="Additional details..."></textarea>
</div>
<div class="form-buttons">
<button type="button" class="btn-secondary" onclick="closeModal('addTaskModal')">Cancel</button>
<button type="submit" class="btn-primary">Add Task</button>
</div>
</form>
</div>
</div>

<!-- Add Project Modal -->
<div id="addProjectModal" class="modal-overlay" style="display: none;">
<div class="modal">
<div class="modal-header">
<h3 class="modal-title">Add New Project</h3>
<button class="modal-close" onclick="closeModal('addProjectModal')">×</button>
</div>
<form onsubmit="submitProject(event)">
<div class="form-group">
<label class="form-label">Project Name</label>
<input type="text" class="form-input" id="projectName" required>
</div>
<div class="form-group">
<label class="form-label">Description</label>
<textarea class="form-textarea" id="projectDescription" placeholder="What is this project about?"></textarea>
</div>
<div class="form-group">
<label class="form-label">Due Date (optional)</label>
<input type="date" class="form-input" id="projectDueDate">
</div>
<div class="form-buttons">
<button type="button" class="btn-secondary" onclick="closeModal('addProjectModal')">Cancel</button>
<button type="submit" class="btn-primary">Add Project</button>
</div>
</form>
</div>
</div>

<!-- Preference Management Modal -->
<div id="preferenceModal" class="modal-overlay" style="display: none;">
<div class="modal">
<div class="modal-header">
<h3 class="modal-title">AI Preferences & Learning</h3>
<button class="modal-close" onclick="closeModal('preferenceModal')">×</button>
</div>
<div class="preference-content">
<div class="preference-section">
<h4 style="color: var(--text-accent); font-size: 13px; margin-bottom: 12px;">🧠 Pattern Intelligence</h4>
    <div id="patternInsights" class="pattern-insights">
    <div class="pattern-metric">
        <span class="metric-label">💬 Your Communication Style</span>
        <span class="metric-value" id="commStyle">Learning...</span>
    </div>
    <div class="pattern-metric">
        <span class="metric-label">⚡ Your Most Productive Hours</span>
        <span class="metric-value" id="peakHours">Learning...</span>
    </div>
    <div class="pattern-metric">
        <span class="metric-label">🎯 Task Completion Rate</span>
        <span class="metric-value" id="completionRate">Learning...</span>
    </div>
    <div class="pattern-metric">
        <span class="metric-label">👨‍👧 Daddy Agent</span>
        <span class="metric-value" id="daddyStatus">Active</span>
    </div>
</div>
<button class="btn-secondary" style="margin-top: 12px;" onclick="showPatternInsights()" title="View detailed patterns">📊 View Detailed Patterns</button>
</div>

<div class="preference-section">
<h4 style="color: var(--text-accent); font-size: 13px; margin-bottom: 12px;">💡 Smart Suggestions</h4>
<div id="suggestionList" class="suggestion-list">
    <!-- Dynamic suggestions appear here -->
</div>
</div>

<div class="preference-section">
<h4 style="color: var(--text-accent); font-size: 13px; margin-bottom: 12px;">Current Preferences</h4>
<div id="currentPreferences" class="preference-list">
<!-- Preferences will be loaded here -->
</div>
</div>

<div class="preference-section">
<h4 style="color: var(--text-accent); font-size: 13px; margin-bottom: 12px;">Preference Learning</h4>
<p style="font-size: 12px; color: var(--text-secondary); margin-bottom: 12px;">
Your preferences are automatically learned from your feedback and interaction patterns.
</p>
<div class="preference-controls">
<button class="btn-secondary" onclick="resetPreferences()">Reset All Preferences</button>
<button class="btn-primary" onclick="updatePreferences()">Update Preferences</button>
</div>
</div>
</div>
</div>
</div>

<script>
const API_URL = "https://khizr-assistant-api.onrender.com";

// Global state
let agents = [];
let currentUser = null;
let notifications = 0;
let pendingApprovals = [];

// Available AI models for display (updated with OpenRouter free models)
const AVAILABLE_MODELS = {
  // Premium Paid Models
  'anthropic/claude-3.5-sonnet': 'Claude 3.5 Sonnet',
  'anthropic/claude-3-haiku': 'Claude 3 Haiku',
  'openai/gpt-4o': 'GPT-4o',
  'openai/gpt-4o-mini': 'GPT-4o Mini',
  'google/gemini-pro-1.5': 'Gemini Pro 1.5',
  'meta-llama/llama-3.1-70b-instruct': 'Llama 3.1 70B',
  'mistralai/mistral-large': 'Mistral Large',

  // Free Models - DeepSeek Family
  'deepseek/deepseek-r1:free': 'DeepSeek R1 0528 (Free)',
  'deepseek/deepseek-v3-0324:free': 'DeepSeek V3 0324 (Free)',
  'tng/deepseek-r1t2-chimera:free': 'DeepSeek R1T2 Chimera (Free)',
  'deepseek/deepseek-r1': 'DeepSeek R1 (Free)',
  'deepseek/deepseek-v3.1': 'DeepSeek V3.1 (Free)',

  // Free Models - Other Providers
  'z-ai/glm-4.5-air:free': 'GLM 4.5 Air (Free)',
  'qwen/qwen3-coder-480b-a35b:free': 'Qwen3 Coder 480B (Free)',
  'tng/deepseek-r1t-chimera:free': 'DeepSeek R1T Chimera (Free)',
  'moonshotai/kimi-k2:free': 'Kimi K2 (Free)'
};

// Authentication helper
function getAuthHeaders() {
const token = localStorage.getItem('khizr_assistant_auth');
return {
'Authorization': `Bearer ${token}`,
'Content-Type': 'application/json'
};
}

// Initialize application
async function initializeApp() {
try {
await loadAgentStatus();
await loadTasks();
await loadProjects();
await loadApprovals();
await loadChatHistory();
await updatePatternIndicators(); // Load pattern indicators
await loadPatternInsights(); // Load pattern intelligence
await loadSmartSuggestions(); // Load smart suggestions
updateDateDisplay();

// Initialize chat tabs
loadChatHistoryForTab('main');

setInterval(loadAgentStatus, 30000); // Update agent status every 30 seconds
setInterval(loadApprovals, 60000); // Check for approvals every minute
// Update pattern data every 5 minutes
setInterval(() => {
    updatePatternIndicators();
    loadPatternInsights();
    loadSmartSuggestions();
}, 300000);
} catch (error) {
console.error('Failed to initialize app:', error);
}
}

// Load agent status
async function loadAgentStatus() {
try {
const response = await fetch(`${API_URL}/api/agents`, {
headers: getAuthHeaders()
});
const data = await response.json();

if (data.success) {
agents = data.agents;
updateAgentIndicators();
updateAgentCards();
}
} catch (error) {
console.error('Failed to load agent status:', error);
}
}

function updateAgentIndicators() {
agents.forEach(agent => {
const indicator = document.getElementById(agent.name.replace('_', '') + 'Agent');
if (indicator) {
indicator.className = `agent-indicator ${agent.status}`;
}
});
}

function updateAgentCards() {
const agentCards = document.getElementById('agentCards');
if (!agentCards) return;

const cardsHTML = agents.map(agent => `
<div class="agent-card ${agent.status}">
<div class="agent-name">${agent.display_name}</div>
<div class="agent-task">${agent.status === 'busy' ? 'Working on task...' : agent.status}</div>
</div>
`).join('');

agentCards.innerHTML = cardsHTML;
}

// Load tasks
async function loadTasks() {
try {
const response = await fetch(`${API_URL}/api/tasks?limit=10`, {
headers: getAuthHeaders()
});
const data = await response.json();

if (data.success) {
displayTasks(data.tasks);
// Also load running tasks separately
displayRunningTasks(data.tasks);
}
} catch (error) {
console.error('Failed to load tasks:', error);
}
}

function displayTasks(tasks) {
const tasksList = document.getElementById('tasksList');
if (!tasksList) return;

if (tasks.length === 0) {
tasksList.innerHTML = '<li style="color: var(--text-secondary); font-style: italic;">No tasks yet. Create one above!</li>';
return;
}

const tasksHTML = tasks.map(task => `
<li class="task-item ${task.priority === 'urgent' ? 'urgent' : ''}">
<span class="task-title">${task.title}</span>
${task.priority === 'urgent' ? '<span class="task-priority urgent">URGENT</span>' : ''}
${task.task_type === 'agent' ? '<span class="task-priority research">AGENT</span>' : ''}
<div class="task-actions">
<button class="task-action-btn" onclick="completeTask('${task.id}')" title="Complete">✓</button>
<button class="task-action-btn" onclick="deleteTask('${task.id}')" title="Delete">🗑️</button>
</div>
</li>
`).join('');

tasksList.innerHTML = tasksHTML;
}

function displayRunningTasks(tasks) {
const runningTasksContainer = document.getElementById('runningTasks');
if (!runningTasksContainer) return;

// Filter tasks that are likely running (pending status, agent-assigned, or recently created)
const runningTasks = tasks.filter(task =>
task.status === 'pending' &&
(task.task_type === 'agent' || task.created_at)
).slice(0, 3); // Show max 3 running tasks

if (runningTasks.length === 0) {
runningTasksContainer.innerHTML = '<div style="color: var(--text-secondary); font-style: italic; font-size: 12px;">No tasks running</div>';
return;
}

const runningHTML = runningTasks.map(task => `
<div class="running-task-item">
<div class="running-task-indicator">🔄</div>
<div class="running-task-info">
<div class="running-task-title">${task.title}</div>
<div class="running-task-status">${task.task_type === 'agent' ? 'Agent Processing' : 'Pending'}</div>
</div>
</div>
`).join('');

runningTasksContainer.innerHTML = runningHTML;
}

// Agent Dashboard Functions
async function loadAgentDashboard() {
await loadAgentStatusOverview();
await loadDecisionTree();
await loadAgentActivity();
await loadAgentMetrics();
}

async function loadAgentStatusOverview() {
const container = document.getElementById('agentStatusOverview');
if (!container) return;

try {
const response = await fetch(`${API_URL}/api/agents`, {
headers: getAuthHeaders()
});
const data = await response.json();

if (data.success) {
const statusHTML = data.agents.map(agent => `
<div class="agent-status-item">
<div class="agent-indicator ${agent.status}"></div>
<div class="agent-info">
<div class="agent-name">${agent.display_name}</div>
<div class="agent-task">${agent.status === 'busy' ? 'Working on task...' : agent.status}</div>
</div>
</div>
`).join('');

container.innerHTML = statusHTML;
}
} catch (error) {
console.error('Failed to load agent status overview:', error);
container.innerHTML = '<div style="color: var(--text-secondary);">Unable to load agent status</div>';
}
}

async function loadDecisionTree() {
const container = document.getElementById('decisionTree');
if (!container) return;

const decisionTreeHTML = `
<div class="decision-node active">
🤖 Agent Decision Flow
<div class="decision-branch">
<div class="decision-node">
📧 Email Processing
<div class="decision-branch">
<div class="decision-node">✅ Auto-respond</div>
<div class="decision-node">⏰ Schedule follow-up</div>
</div>
</div>
<div class="decision-node">
📝 Task Management
<div class="decision-branch">
<div class="decision-node">🎯 Create task</div>
<div class="decision-node">👨‍👧 Escalate to Daddy Agent</div>
</div>
</div>
<div class="decision-node">
🧠 Pattern Learning
<div class="decision-branch">
<div class="decision-node">📊 Analyze patterns</div>
<div class="decision-node">💡 Generate suggestions</div>
</div>
</div>
</div>
</div>
`;

container.innerHTML = decisionTreeHTML;
}

async function loadAgentActivity() {
const container = document.getElementById('agentActivity');
if (!container) return;

// Mock activity data - in real implementation, this would come from backend
const activities = [
{ time: '2 min ago', description: 'Browser Agent completed research task' },
{ time: '5 min ago', description: 'Daddy Agent escalated high-priority task' },
{ time: '12 min ago', description: 'Email Agent processed 3 new messages' },
{ time: '18 min ago', description: 'PM Agent created project milestone' },
{ time: '25 min ago', description: 'Research Agent analyzed user patterns' }
];

const activityHTML = activities.map(activity => `
<div class="activity-item">
<span class="activity-time">${activity.time}</span>
<span class="activity-description">${activity.description}</span>
</div>
`).join('');

container.innerHTML = activityHTML;
}

async function loadAgentMetrics() {
const container = document.getElementById('agentMetrics');
if (!container) return;

// Mock metrics data - in real implementation, this would come from backend
const metrics = [
{ label: 'Tasks Completed', value: '24' },
{ label: 'Response Time', value: '1.2s' },
{ label: 'Success Rate', value: '94%' },
{ label: 'Active Agents', value: '4/4' },
{ label: 'Patterns Learned', value: '156' },
{ label: 'User Satisfaction', value: '4.8/5' }
];

const metricsHTML = metrics.map(metric => `
<div class="metric-item">
<span class="metric-label">${metric.label}</span>
<span class="metric-value">${metric.value}</span>
</div>
`).join('');

container.innerHTML = metricsHTML;
}

function refreshAgentStatus() {
loadAgentDashboard();
showToast('Agent status refreshed', 'success');
}

function showAgentAnalytics() {
// Reuse existing daddy analytics function
showDaddyAnalytics();
}

function showDaddyControls() {
// Show daddy controls modal
showModal('Daddy Agent Controls', `
<div style="padding: 20px;">
<h3>Daddy Agent Configuration</h3>
<div style="margin: 20px 0;">
<button class="btn btn-small" onclick="toggleDaddyMonitoring()" id="daddyToggle">
👨‍👧 Toggle Daddy Mode
</button>
</div>
<div style="margin: 20px 0;">
<button class="btn btn-small" onclick="showDaddyAnalytics()">
📈 View Analytics
</button>
</div>
<p style="color: var(--text-secondary); font-size: 12px;">
Daddy Agent monitors task completion, escalates urgent items, and provides proactive suggestions.
</p>
</div>
`);
}

function displayProjects(projects) {
const projectList = document.getElementById('projectList');
if (!projectList) return;

if (projects.length === 0) {
projectList.innerHTML = '<p style="color: var(--text-secondary); font-style: italic;">No projects yet. Create one above!</p>';
return;
}

const projectsHTML = projects.map(project => {
const priorityClass = getPriorityClass(project.priority || 3);
const priorityText = getPriorityText(project.priority || 3);
const dueDate = project.deadline ? new Date(project.deadline).toLocaleDateString() : null;

return `
<div class="project-item" onclick="openProject('${project.id}')">
<div class="project-title">
<span>${project.name}</span>
<div class="project-actions">
<button class="project-action-btn" onclick="event.stopPropagation(); editProject('${project.id}')" title="Edit Project">✏️</button>
<button class="project-action-btn" onclick="event.stopPropagation(); deleteProject('${project.id}')" title="Delete Project">🗑️</button>
</div>
</div>
<div class="project-desc">${project.description || 'No description'}</div>
<div class="project-meta">
${priorityText ? `<span class="project-priority ${priorityClass}">${priorityText}</span>` : ''}
${dueDate ? `<span>📅 ${dueDate}</span>` : ''}
</div>
</div>
`;
}).join('');

projectList.innerHTML = projectsHTML;
}

// Project management helper functions
function getPriorityClass(priority) {
const classes = {
1: 'high',
2: 'high',
3: 'medium',
4: 'low',
5: 'low'
};
return classes[priority] || 'medium';
}

function getPriorityText(priority) {
const texts = {
1: 'CRITICAL',
2: 'HIGH',
3: 'MEDIUM',
4: 'LOW',
5: 'MINIMAL'
};
return texts[priority] || 'MEDIUM';
}

// Sort projects functionality
let currentProjects = [];
let currentSortType = 'date';

function sortProjects(sortType) {
currentSortType = sortType;

// Update sort button states
document.querySelectorAll('.sort-btn').forEach(btn => btn.classList.remove('active'));
document.getElementById('sort' + sortType.charAt(0).toUpperCase() + sortType.slice(1)).classList.add('active');

// Sort the projects
let sortedProjects = [...currentProjects];

switch(sortType) {
case 'name':
sortedProjects.sort((a, b) => a.name.localeCompare(b.name));
break;
case 'date':
sortedProjects.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
break;
case 'priority':
sortedProjects.sort((a, b) => (a.priority || 3) - (b.priority || 3));
break;
}

displayProjects(sortedProjects);
}

// Store projects when loading
async function loadProjects() {
try {
const response = await fetch(`${API_URL}/api/projects`, {
headers: getAuthHeaders()
});
const data = await response.json();

if (data.success) {
currentProjects = data.projects; // Store for sorting
displayProjects(data.projects);
}
} catch (error) {
console.error('Failed to load projects:', error);
}
}

// Project actions
function editProject(projectId) {
const project = currentProjects.find(p => p.id === projectId);
if (!project) return;

// Create edit modal with pre-filled values
showModal('Edit Project', `
<div class="form-group">
<label class="form-label">Project Name</label>
<input type="text" class="form-input" id="editProjectName" value="${project.name}" required>
</div>
<div class="form-group">
<label class="form-label">Description</label>
<textarea class="form-textarea" id="editProjectDescription">${project.description || ''}</textarea>
</div>
<div class="form-group">
<label class="form-label">Priority</label>
<select class="form-input" id="editProjectPriority">
<option value="1" ${project.priority === 1 ? 'selected' : ''}>Critical</option>
<option value="2" ${project.priority === 2 ? 'selected' : ''}>High</option>
<option value="3" ${project.priority === 3 ? 'selected' : ''}>Medium</option>
<option value="4" ${project.priority === 4 ? 'selected' : ''}>Low</option>
<option value="5" ${project.priority === 5 ? 'selected' : ''}>Minimal</option>
</select>
</div>
<div class="form-group">
<label class="form-label">Due Date</label>
<input type="date" class="form-input" id="editProjectDueDate" value="${project.deadline ? new Date(project.deadline).toISOString().split('T')[0] : ''}">
</div>
<div class="form-buttons">
<button type="button" class="btn-secondary" onclick="document.querySelector('.modal-overlay').remove()">Cancel</button>
<button type="button" class="btn-primary" onclick="updateProject('${projectId}')">Update Project</button>
</div>
`);
}

async function updateProject(projectId) {
const name = document.getElementById('editProjectName').value.trim();
const description = document.getElementById('editProjectDescription').value.trim();
const priority = parseInt(document.getElementById('editProjectPriority').value);
const dueDate = document.getElementById('editProjectDueDate').value;

if (!name) return;

try {
const response = await fetch(`${API_URL}/api/projects/${projectId}`, {
method: 'PATCH',
headers: getAuthHeaders(),
body: JSON.stringify({ name, description, priority, deadline: dueDate || null })
});

if (response.ok) {
document.querySelector('.modal-overlay').remove();
await loadProjects();
showToast('Project updated successfully!', 'success');
}
} catch (error) {
console.error('Failed to update project:', error);
showToast('Failed to update project', 'error');
}
}

async function deleteProject(projectId) {
if (!confirm('Are you sure you want to delete this project?')) return;

try {
const response = await fetch(`${API_URL}/api/projects/${projectId}`, {
method: 'DELETE',
headers: getAuthHeaders()
});

if (response.ok) {
await loadProjects();
showToast('Project deleted successfully!', 'success');
}
} catch (error) {
console.error('Failed to delete project:', error);
showToast('Failed to delete project', 'error');
}
}

// Create test approval for UI testing (call from browser console)
async function createTestApproval() {
    try {
        const response = await fetch(`${API_URL}/api/agents/approvals/test`, {
            method: 'POST',
            headers: getAuthHeaders()
        });
        const data = await response.json();
        if (data.success) {
            await loadApprovals(); // Reload approvals
            showToast('Test approval created! Check the bell icon.', 'success');
        } else {
            console.error('Failed to create test approval:', data);
        }
    } catch (error) {
        console.error('Error creating test approval:', error);
    }
}

// Load pending approvals
async function loadApprovals() {
try {
const response = await fetch(`${API_URL}/api/agents/approvals/pending`, {
headers: getAuthHeaders()
});
const data = await response.json();

if (data.success) {
pendingApprovals = data.approvals;
displayApprovals(data.approvals);
updateApprovalsBadge(data.approvals.length);
}
} catch (error) {
console.error('Failed to load approvals:', error);
}
}

function displayApprovals(approvals) {
const approvalsList = document.getElementById('approvalsList');
if (!approvalsList) return;

if (approvals.length === 0) {
approvalsList.innerHTML = '<p style="color: var(--text-secondary);">No approvals needed right now.</p>';
return;
}

const approvalsHTML = approvals.map(approval => `
<div class="approval-item">
<div class="approval-header">
<div class="approval-title">${approval.title}</div>
${approval.estimated_cost ? `<div class="approval-cost">${approval.estimated_cost}</div>` : ''}
</div>
<div class="approval-description">${approval.description}</div>
<div class="approval-actions">
<button class="approve-btn" onclick="handleApproval('${approval.id}', 'approved')">Approve</button>
<button class="reject-btn" onclick="handleApproval('${approval.id}', 'rejected')">Reject</button>
</div>
</div>
`).join('');

approvalsList.innerHTML = approvalsHTML;
}

function updateApprovalsBadge(count) {
const headerBadge = document.getElementById('approvalsHeaderBtn');
if (headerBadge) {
headerBadge.setAttribute('data-count', count);
}
}

// Chat functionality
async function loadChatHistory() {
try {
const response = await fetch(`${API_URL}/api/chat/history`, {
headers: getAuthHeaders()
});
const data = await response.json();

if (data.success && data.chat_history.length > 0) {
// Organize messages by type/category
data.chat_history.forEach(msg => {
let tabCategory = 'main'; // Default tab

// Categorize messages based on content or type
if (msg.description && msg.description.toLowerCase().includes('task')) {
tabCategory = 'tasks';
} else if (msg.description && (msg.description.toLowerCase().includes('project') || msg.description.toLowerCase().includes('plan'))) {
tabCategory = 'projects';
} else if (msg.description && (msg.description.toLowerCase().startsWith('?') || msg.description.toLowerCase().includes('research'))) {
tabCategory = 'research';
}

// Store in appropriate tab history
if (!chatHistory[tabCategory]) {
chatHistory[tabCategory] = [];
}

chatHistory[tabCategory].push({
sender: 'user',
content: msg.description,
id: `hist_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
timestamp: msg.created_at || new Date().toISOString()
});

// Add corresponding assistant response
chatHistory[tabCategory].push({
sender: 'assistant',
content: 'Message processed and stored in your knowledge base.',
id: `hist_resp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
timestamp: msg.created_at || new Date().toISOString()
});
});
} else {
// Initialize empty chat histories with welcome messages
Object.keys(chatHistory).forEach(tab => {
if (chatHistory[tab].length === 0) {
let welcomeMessage = '';
switch(tab) {
case 'main':
welcomeMessage = 'Hey! I\'m your AI assistant. You can ask me anything or use our prefix system: <strong>?</strong> for research, <strong>zz</strong> for tasks, <strong>!!</strong> for urgent items.';
break;
case 'tasks':
welcomeMessage = 'Task-focused chat. Use "zz" prefix for new tasks or ask me about your current tasks.';
break;
case 'projects':
welcomeMessage = 'Project-focused chat. Let\'s discuss your projects and planning.';
break;
case 'research':
welcomeMessage = 'Research-focused chat. Use "?" prefix for research questions.';
break;
}
chatHistory[tab].push({
sender: 'assistant',
content: welcomeMessage,
id: `welcome_${tab}_${Date.now()}`,
timestamp: new Date().toISOString()
});
}
});
}
} catch (error) {
console.error('Failed to load chat history:', error);
}
}

function sendChatMessage() {
const input = document.getElementById('chatInput');
const message = input.value.trim();
if (!message) return;

addChatMessage('user', message);
input.value = '';

const sendBtn = document.getElementById('chatSendBtn');
sendBtn.disabled = true;
sendBtn.textContent = 'Thinking...';

processChatMessage(message);
}

async function processChatMessage(message) {
  try {
    const aiModel = document.getElementById('aiModel').value;

    const response = await fetch(`${API_URL}/api/chat/process`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify({ message, model: aiModel })
    });

    const data = await response.json();

    if (data.success) {
      addChatMessage('assistant', data.message);

      // Show which model was used
      if (data.model_used) {
        const modelName = AVAILABLE_MODELS[data.model_used] || data.model_used;
        const isFree = data.model_used.includes(':free') || data.model_used.includes('deepseek') || data.model_used.includes('glm') || data.model_used.includes('qwen') || data.model_used.includes('kimi');
        const costIndicator = isFree ? '🆓' : '💎';
        addChatMessage('system', `${costIndicator} ${modelName}`);
      }

      // Handle task/project creation based on message type
      if (data.type === 'task_created' || data.type === 'urgent_created') {
        await loadTasks();
        await loadApprovals();
      } else if (data.type === 'project_related') {
        await loadProjects();
      }
    } else {
      addChatMessage('assistant', data.message);

      // Handle specific error types
      if (data.error_type === 'rate_limit') {
        addChatMessage('system', '⚠️ Rate limit reached. Please wait before sending more messages.');
      } else if (data.error_type === 'insufficient_credits') {
        addChatMessage('system', '💰 OpenRouter credits exhausted. Please add more credits.');
      }
    }
  } catch (error) {
    console.error('Chat processing error:', error);
    addChatMessage('assistant', 'Connection error. Please check your internet and try again.');
  } finally {
    const sendBtn = document.getElementById('chatSendBtn');
    sendBtn.disabled = false;
    sendBtn.textContent = 'Send';
  }
}

function addChatMessage(sender, content, messageId = null) {
const messagesContainer = document.getElementById('chatMessages');
const messageDiv = document.createElement('div');
messageDiv.className = `chat-message ${sender}`;

// Generate unique message ID if not provided
const msgId = messageId || `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
messageDiv.setAttribute('data-message-id', msgId);

const now = new Date();
const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

let feedbackHTML = '';
if (sender === 'assistant') {
  feedbackHTML = `
  <div class="message-feedback">
    <button class="feedback-btn" onclick="sendFeedback('${msgId}', 'positive')" title="Good response">👍</button>
    <button class="feedback-btn" onclick="sendFeedback('${msgId}', 'negative')" title="Needs improvement">👎</button>
  </div>`;
}

messageDiv.innerHTML = `
<div class="message-content">${content}</div>
<div class="message-time">${timeString}</div>
${feedbackHTML}
`;

messagesContainer.appendChild(messageDiv);
messagesContainer.scrollTop = messagesContainer.scrollHeight;

// Store message in current tab's history
if (!chatHistory[currentChatTab]) {
  chatHistory[currentChatTab] = [];
}
chatHistory[currentChatTab].push({
  sender: sender,
  content: content,
  id: msgId,
  timestamp: now.toISOString()
});
}

function handleChatKeyPress(event) {
if (event.key === 'Enter' && !event.shiftKey) {
event.preventDefault();
sendChatMessage();
}
}

// Chat tab functionality
let currentChatTab = 'main';
let chatHistory = {
main: [],
tasks: [],
projects: [],
research: []
};

function switchChatTab(tabName) {
currentChatTab = tabName;

// Update tab appearance
document.querySelectorAll('.chat-tab').forEach(tab => {
tab.classList.remove('active');
});
event.target.classList.add('active');

// Load chat history for this tab
loadChatHistoryForTab(tabName);
}

function loadChatHistoryForTab(tabName) {
const messagesContainer = document.getElementById('chatMessages');
messagesContainer.innerHTML = '';

// Add welcome message for empty tabs
if (chatHistory[tabName].length === 0) {
let welcomeMessage = '';
switch(tabName) {
case 'main':
welcomeMessage = 'Hey! I\'m your AI assistant. How can I help you today?';
break;
case 'tasks':
welcomeMessage = 'Task-focused chat. Use "zz" prefix for new tasks or ask me about your current tasks.';
break;
case 'projects':
welcomeMessage = 'Project-focused chat. Let\'s discuss your projects and planning.';
break;
case 'research':
welcomeMessage = 'Research-focused chat. Use "?" prefix for research questions.';
break;
}
addChatMessage('assistant', welcomeMessage);
} else {
// Load existing messages for this tab
chatHistory[tabName].forEach(msg => {
addChatMessage(msg.sender, msg.content, msg.id);
});
}
}

// Auto-resize textarea
function autoResizeTextarea(textarea) {
textarea.style.height = 'auto';
textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
}

// Task management
async function submitTask(event) {
event.preventDefault();
const title = document.getElementById('taskTitle').value.trim();
const priority = document.getElementById('taskPriority').value;
const assigned_to = document.getElementById('taskAssignTo').value;
const description = document.getElementById('taskDescription').value.trim();

if (!title) return;

try {
const response = await fetch(`${API_URL}/api/tasks`, {
method: 'POST',
headers: getAuthHeaders(),
body: JSON.stringify({
title,
priority,
assigned_to: assigned_to === 'human' ? null : assigned_to,
task_type: assigned_to === 'human' ? 'manual' : 'agent',
description
})
});

const data = await response.json();

if (data.success) {
closeModal('addTaskModal');
await loadTasks();

// Reset form
document.getElementById('taskTitle').value = '';
document.getElementById('taskDescription').value = '';
document.getElementById('taskPriority').value = 'normal';
document.getElementById('taskAssignTo').value = 'human';
}
} catch (error) {
console.error('Failed to create task:', error);
}
}

async function completeTask(taskId) {
try {
const response = await fetch(`${API_URL}/api/tasks/${taskId}/status`, {
method: 'PATCH',
headers: getAuthHeaders(),
body: JSON.stringify({ status: 'completed' })
});

if (response.ok) {
await loadTasks();
}
} catch (error) {
console.error('Failed to complete task:', error);
}
}

async function deleteTask(taskId) {
// For now, we'll mark as cancelled instead of deleting
await completeTask(taskId);
}

// Project management
async function submitProject(event) {
event.preventDefault();
const name = document.getElementById('projectName').value.trim();
const description = document.getElementById('projectDescription').value.trim();
const due_date = document.getElementById('projectDueDate').value;

if (!name) return;

try {
const response = await fetch(`${API_URL}/api/projects`, {
method: 'POST',
headers: getAuthHeaders(),
body: JSON.stringify({ name, description, due_date })
});

const data = await response.json();

if (data.success) {
closeModal('addProjectModal');
await loadProjects();

// Reset form
document.getElementById('projectName').value = '';
document.getElementById('projectDescription').value = '';
document.getElementById('projectDueDate').value = '';
}
} catch (error) {
console.error('Failed to create project:', error);
}
}

// Approval handling
async function handleApproval(approvalId, status) {
try {
const response = await fetch(`${API_URL}/api/approvals/${approvalId}`, {
method: 'PATCH',
headers: getAuthHeaders(),
body: JSON.stringify({ status })
});

if (response.ok) {
await loadApprovals();
}
} catch (error) {
console.error('Failed to handle approval:', error);
}
}

// AI Note processing (quick processing)
async function processAINote() {
const note = document.getElementById('aiNote')?.value || '';
if (!note.trim()) return;

const btn = document.querySelector('.ai-send-btn');
if (!btn) return;

const originalText = btn.textContent;
btn.textContent = 'processing...';
btn.disabled = true;

try {
await processChatMessage(note);
document.getElementById('aiNote').value = '';
await loadTasks(); // Refresh tasks in case new ones were created
} catch (error) {
console.error('Failed to process AI note:', error);
} finally {
setTimeout(() => {
btn.textContent = originalText;
btn.disabled = false;
}, 1000);
}
}

// UI Helper functions
function showView(viewName) {
document.querySelectorAll('[id$="-view"]').forEach(view => {
view.style.display = 'none';
view.classList.remove('active');
});

if (viewName === 'today') {
document.getElementById('today-view').style.display = 'grid';
} else {
const viewElement = document.getElementById(`${viewName}-view`);
if (viewElement) {
viewElement.style.display = 'block';
viewElement.classList.add('active');

// Load data for specific views
if (viewName === 'agents') {
loadAgentDashboard();
}
}
}

document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
document.querySelectorAll('.nav-btn').forEach(btn => {
if (btn.textContent.toLowerCase().includes(viewName.toLowerCase()) ||
    (viewName === 'chat' && btn.textContent.toLowerCase().includes('chat'))) {
btn.classList.add('active');
}
});
}

function setTheme(theme) {
document.body.className = `theme-${theme}`;
document.querySelectorAll('.theme-btn').forEach(btn => btn.classList.remove('active'));
const active = document.querySelector(`.theme-btn.${theme}`);
if (active) active.classList.add('active');
localStorage.setItem('theme', theme);
}

function showAddTaskModal() {
document.getElementById('addTaskModal').style.display = 'flex';
document.getElementById('taskTitle').focus();
}

function showAddProjectModal() {
document.getElementById('addProjectModal').style.display = 'flex';
document.getElementById('projectName').focus();
}

function showModal(title, content) {
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    modalOverlay.onclick = (e) => {
        if (e.target === modalOverlay) {
            document.body.removeChild(modalOverlay);
        }
    };

    // Create modal content
    const modal = document.createElement('div');
    modal.className = 'modal';

    modal.innerHTML = `
        <div class="modal-header">
            <h3 class="modal-title">${title}</h3>
            <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">×</button>
        </div>
        ${content}
    `;

    modalOverlay.appendChild(modal);
    document.body.appendChild(modalOverlay);
}

function closeModal(modalId) {
document.getElementById(modalId).style.display = 'none';
}

function showMindPage() {
showView('mind');
}

function saveMindNote() {
const input = document.getElementById('mindInput');
const content = input.value.trim();
if (!content) return;

console.log('Saving mind note:', content);

const btn = document.querySelector('.mind-save-btn');
const originalText = btn.textContent;
btn.textContent = 'saved!';
setTimeout(() => {
btn.textContent = originalText;
input.value = '';
}, 1000);
}

function openProject(projectId) {
console.log('Opening project:', projectId);
// TODO: Implement project detail view
}

function updateDateDisplay() {
const dateDisplay = document.getElementById('dateDisplay');
if (dateDisplay) {
const now = new Date();
const options = {
weekday: 'long',
year: 'numeric',
month: 'long',
day: 'numeric'
};
dateDisplay.textContent = now.toLocaleDateString('en-US', options);
}
}

// Gmail functionality (existing)
async function connectGmail() {
const connectBtn = document.getElementById('gmailConnectBtn');
const refreshBtn = document.getElementById('refreshEmailsBtn');
const status = document.getElementById('emailStatus');

connectBtn.disabled = true;
connectBtn.textContent = 'Connecting...';
status.textContent = 'Authenticating with Gmail...';

try {
const response = await fetch(`${API_URL}/api/gmail/connect`, {
method: 'POST',
headers: getAuthHeaders()
});

if (response.ok) {
connectBtn.style.display = 'none';
refreshBtn.style.display = 'inline-block';
status.textContent = 'Connected to Gmail ✓';
await loadEmails();
} else {
throw new Error('Failed to connect');
}
} catch (error) {
status.textContent = 'Connection failed. Please try again.';
connectBtn.disabled = false;
connectBtn.textContent = 'Connect Gmail';
}
}

async function loadEmails() {
const status = document.getElementById('emailStatus');
status.textContent = 'Loading emails...';

try {
const response = await fetch(`${API_URL}/api/gmail/messages`, {
headers: getAuthHeaders()
});

if (response.ok) {
const data = await response.json();
displayEmails(data.messages || []);
status.textContent = `Loaded ${data.messages?.length || 0} emails`;
} else {
throw new Error('Failed to load emails');
}
} catch (error) {
status.textContent = 'Failed to load emails';
console.error('Email loading error:', error);
}
}

async function refreshEmails() {
await loadEmails();
}

function displayEmails(emails) {
const emailsList = document.getElementById('emailsList');

if (emails.length === 0) {
emailsList.innerHTML = '<p>No emails found.</p>';
return;
}

const emailsHTML = emails.map(email => `
<div class="email-item ${email.unread ? 'unread' : ''}" onclick="openEmail('${email.id}')">
<div class="email-header">
<div class="email-from">${email.from || 'Unknown Sender'}</div>
<div class="email-date">${formatEmailDate(email.date)}</div>
</div>
<div class="email-subject">${email.subject || 'No Subject'}</div>
<div class="email-snippet">${email.snippet || ''}</div>
</div>
`).join('');

emailsList.innerHTML = emailsHTML;
}

function formatEmailDate(dateString) {
if (!dateString) return '';
const date = new Date(dateString);
const now = new Date();
const diffTime = Math.abs(now - date);
const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

if (diffDays === 1) return 'Yesterday';
if (diffDays < 7) return `${diffDays} days ago`;
return date.toLocaleDateString();
}

function openEmail(emailId) {
console.log('Opening email:', emailId);
// TODO: Implement email detail view
}

function logout() {
localStorage.removeItem('khizr_assistant_gate');
localStorage.removeItem('khizr_assistant_auth');
window.location.href = 'index.html';
}

function checkAppAuth() {
const gateAuth = localStorage.getItem('khizr_assistant_gate');
if (!gateAuth) {
window.location.href = 'index.html';
return;
}

try {
const authData = JSON.parse(gateAuth);
if (!authData.authenticated || Date.now() > authData.expires) {
localStorage.removeItem('khizr_assistant_gate');
window.location.href = 'index.html';
return;
}
} catch (error) {
localStorage.removeItem('khizr_assistant_gate');
window.location.href = 'index.html';
return;
}
}

// Close modals on escape key
document.addEventListener('keydown', function(event) {
if (event.key === 'Escape') {
const modals = document.querySelectorAll('.modal-overlay');
modals.forEach(modal => {
if (modal.style.display === 'flex') {
modal.style.display = 'none';
}
});
}
});

// Close modals on outside click
document.addEventListener('click', function(event) {
if (event.target.classList.contains('modal-overlay')) {
event.target.style.display = 'none';
}
});

// Preference and Feedback Functions
async function sendFeedback(messageId, feedback) {
  try {
    const response = await fetch(`${API_URL}/api/chat/feedback`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify({ messageId, feedback })
    });

    if (response.ok) {
      // Show brief feedback confirmation
      const feedbackBtn = event.target;
      const originalText = feedbackBtn.textContent;
      feedbackBtn.textContent = feedback === 'positive' ? '✓' : '✗';
      feedbackBtn.style.opacity = '0.6';

      setTimeout(() => {
        feedbackBtn.textContent = originalText;
        feedbackBtn.style.opacity = '1';
      }, 1000);

      // Update preferences after feedback
      setTimeout(() => {
        updatePatternIndicators();
      }, 2000);
    } else {
      console.warn('Failed to send feedback');
    }
  } catch (error) {
    console.error('Feedback error:', error);
  }
}

// Replace the existing updatePreferenceIndicators function
async function updatePatternIndicators() {
    try {
        const response = await fetch(`${API_URL}/api/agents/patterns/analyze`, {
            headers: getAuthHeaders()
        });

        const data = await response.json();
        const patterns = data.patterns;

        const indicators = [];

        // Communication style indicator
        if (patterns.communicationStyle) {
            const style = patterns.communicationStyle.prefersBrief ? 'Brief' :
                         patterns.communicationStyle.prefersDetailed ? 'Detailed' : 'Balanced';
            indicators.push(`💬 ${style}`);
        }

        // Productivity pattern
        if (patterns.preferredTimes?.peakHours) {
            indicators.push(`⚡ Peak: ${patterns.preferredTimes.peakHours[0]}:00`);
        }

        // Task completion indicator
        if (patterns.taskCompletion?.highCompletionRate) {
            indicators.push(`🎯 High Achiever`);
        }

        // Urgency pattern
        if (patterns.urgencyPatterns?.frequentUrgentTasks) {
            indicators.push(`🚨 Handles Pressure`);
        }

        document.getElementById('preferenceIndicators').innerHTML =
            indicators.map(badge => `<span class="preference-badge">${badge}</span>`).join('');

    } catch (error) {
        console.log('Pattern indicators not available yet');
    }
}

function displayPreferenceIndicators(preferences) {
  const indicators = document.getElementById('preferenceIndicators');
  if (!indicators) return;

  const badges = [];

  // Check format preferences
  if (preferences?.format?.word_tree?.preferred) {
    badges.push('🌳 Word Tree');
  }

  // Check style preferences
  if (preferences?.style?.brief_responses?.preferred) {
    badges.push('💬 Brief Mode');
  }

  // Check priority preferences
  if (preferences?.priority?.completion_focus?.preferred) {
    badges.push('🎯 Completion Focus');
  }

  // Display badges
  if (badges.length > 0) {
    const badgesHTML = badges.map(badge => `<span class="preference-badge">${badge}</span>`).join('');
    indicators.innerHTML = badgesHTML;
  } else {
    indicators.innerHTML = '<span class="preference-badge" style="opacity: 0.6;">Learning preferences...</span>';
  }
}

function showPreferenceModal() {
  document.getElementById('preferenceModal').style.display = 'flex';
  loadCurrentPreferences();
}

async function loadCurrentPreferences() {
  try {
    const response = await fetch(`${API_URL}/api/user/preferences`, {
      headers: getAuthHeaders()
    });

    if (response.ok) {
      const preferences = await response.json();
      displayCurrentPreferences(preferences);
    }
  } catch (error) {
    console.error('Failed to load preferences for modal:', error);
  }
}

function displayCurrentPreferences(preferences) {
  const container = document.getElementById('currentPreferences');
  if (!container) return;

  const preferenceItems = [];

  // Format preferences
  if (preferences?.format?.word_tree) {
    preferenceItems.push(createPreferenceItem('Word Tree Format', preferences.format.word_tree));
  }

  // Style preferences
  if (preferences?.style?.brief_responses) {
    preferenceItems.push(createPreferenceItem('Brief Responses', preferences.style.brief_responses));
  }

  // Priority preferences
  if (preferences?.priority?.completion_focus) {
    preferenceItems.push(createPreferenceItem('Completion Focus', preferences.priority.completion_focus));
  }

  if (preferenceItems.length > 0) {
    container.innerHTML = preferenceItems.join('');
  } else {
    container.innerHTML = '<p style="color: var(--text-secondary); font-style: italic;">No preferences learned yet. Keep using the chat and providing feedback!</p>';
  }
}

function createPreferenceItem(name, preferenceData) {
  const confidence = preferenceData.confidence || 0;
  const isEnabled = preferenceData.preferred || false;

  return `
  <div class="preference-item">
    <div class="preference-name">${name}</div>
    <div class="preference-toggle">
      <span class="preference-confidence">${Math.round(confidence * 100)}% confidence</span>
      <input type="checkbox" ${isEnabled ? 'checked' : ''} onchange="togglePreference('${name.toLowerCase().replace(/\s+/g, '_')}', this.checked)">
    </div>
  </div>`;
}

async function togglePreference(preferenceName, enabled) {
  try {
    const response = await fetch(`${API_URL}/api/user/preferences/${preferenceName}`, {
      method: 'PATCH',
      headers: getAuthHeaders(),
      body: JSON.stringify({ enabled })
    });

    if (response.ok) {
      // Refresh preferences after update
      updatePatternIndicators();
      loadCurrentPreferences();
    }
  } catch (error) {
    console.error('Failed to update preference:', error);
  }
}

async function resetPreferences() {
  if (!confirm('Are you sure you want to reset all preferences? This will clear all learned patterns.')) {
    return;
  }

  try {
    const response = await fetch(`${API_URL}/api/user/preferences/reset`, {
      method: 'POST',
      headers: getAuthHeaders()
    });

    if (response.ok) {
      updatePatternIndicators();
      loadCurrentPreferences();
      alert('Preferences have been reset. The AI will start learning from scratch.');
    }
  } catch (error) {
    console.error('Failed to reset preferences:', error);
    alert('Failed to reset preferences. Please try again.');
  }
}

async function updatePreferences() {
  // This could be extended to batch update multiple preferences
  updatePatternIndicators();
  loadCurrentPreferences();
  alert('Preferences updated successfully!');
}

// Pattern Intelligence Functions
async function loadPatternInsights() {
    try {
        const response = await fetch(`${API_URL}/api/agents/patterns/analyze`, {
            headers: getAuthHeaders()
        });

        const data = await response.json();

        // Update pattern insights with clearer descriptions
        const commStyle = data.patterns.communicationStyle?.prefersBrief ? 'Brief & Direct' :
                         data.patterns.communicationStyle?.prefersDetailed ? 'Detailed & Thorough' :
                         'Balanced Style';

        const peakHours = data.patterns.preferredTimes?.peakHours?.length > 0 ?
                         data.patterns.preferredTimes.peakHours.map(h => `${h}:00`).join(', ') :
                         'Still learning your schedule';

        const completionRate = data.patterns.taskCompletion?.highCompletionRate ?
                              'Excellent (95%+ completion)' :
                              'Good (75-94% completion)';

        document.getElementById('commStyle').textContent = commStyle;
        document.getElementById('peakHours').textContent = peakHours;
        document.getElementById('completionRate').textContent = completionRate;

    } catch (error) {
        console.log('Pattern insights not available');
    }
}

async function loadSmartSuggestions() {
    try {
        const response = await fetch(`${API_URL}/api/agents/daddy/suggestions`, {
            headers: getAuthHeaders()
        });

        const data = await response.json();

        const suggestionsHtml = data.suggestions.map(suggestion => `
            <div class="suggestion-item" onclick="applySuggestion('${suggestion.type}')">
                <span class="suggestion-icon">${getSuggestionIcon(suggestion.type)}</span>
                <span class="suggestion-text">${suggestion.message}</span>
                <span class="suggestion-confidence">${Math.round(suggestion.confidence * 100)}%</span>
            </div>
        `).join('');

        document.getElementById('suggestionList').innerHTML = suggestionsHtml;
        document.getElementById('suggestionCount').textContent = data.suggestions.length;

    } catch (error) {
        console.log('Suggestions not available');
    }
}

function getSuggestionIcon(type) {
    const icons = {
        task_breakdown: '🔨',
        scheduling: '⏰',
        communication: '💬',
        productivity: '⚡'
    };
    return icons[type] || '💡';
}

// Daddy Agent Functions
async function toggleDaddyMonitoring() {
    try {
        const response = await fetch(`${API_URL}/api/agents/daddy/status`, {
            headers: getAuthHeaders()
        });

        const data = await response.json();
        const currentLevel = data.status.monitoring_level;

        // Toggle between low and high
        const newLevel = currentLevel === 'low' ? 'high' : 'low';

        const updateResponse = await fetch(`${API_URL}/api/agents/daddy/config`, {
            method: 'PUT',
            headers: getAuthHeaders(),
            body: JSON.stringify({ monitoringLevel: newLevel })
        });

        if (updateResponse.ok) {
            document.getElementById('daddyToggle').textContent =
                `👨‍👧 ${newLevel === 'high' ? 'Disable' : 'Enable'} Daddy Mode`;
            showToast(`Daddy agent ${newLevel === 'high' ? 'activated' : 'deactivated'}`, 'success');
        }

    } catch (error) {
        console.error('Daddy toggle error:', error);
        let errorMessage = 'Failed to toggle daddy monitoring';
        if (error.message) {
            errorMessage += `: ${error.message}`;
        }
        showToast(errorMessage, 'error');
    }
}

async function showDaddyAnalytics() {
    try {
        const response = await fetch(`${API_URL}/api/agents/daddy/analytics`, {
            headers: getAuthHeaders()
        });

        const data = await response.json();

        const analyticsHtml = `
            <div style="padding: 20px;">
                <h3>Daddy Agent Analytics</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
                    <div style="background: var(--bg-card); padding: 15px; border-radius: 8px;">
                        <div style="font-size: 24px; margin-bottom: 5px;">📊</div>
                        <div style="font-weight: 600;">${data.current_metrics.tasksMonitored}</div>
                        <div style="color: var(--text-secondary); font-size: 12px;">Tasks Monitored</div>
                    </div>
                    <div style="background: var(--bg-card); padding: 15px; border-radius: 8px;">
                        <div style="font-size: 24px; margin-bottom: 5px;">🚨</div>
                        <div style="font-weight: 600;">${data.current_metrics.escalationsTriggered}</div>
                        <div style="color: var(--text-secondary); font-size: 12px;">Escalations</div>
                    </div>
                    <div style="background: var(--bg-card); padding: 15px; border-radius: 8px;">
                        <div style="font-size: 24px; margin-bottom: 5px;">💡</div>
                        <div style="font-weight: 600;">${data.current_metrics.suggestionsProvided}</div>
                        <div style="color: var(--text-secondary); font-size: 12px;">Suggestions</div>
                    </div>
                </div>
            </div>
        `;

        showModal('Daddy Agent Analytics', analyticsHtml);

    } catch (error) {
        showToast('Failed to load analytics', 'error');
    }
}

async function applySuggestion(type) {
    try {
        // Log that user clicked on suggestion
        await fetch(`${API_URL}/api/agents/patterns/feedback`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': getAuthHeaders()['Authorization']
            },
            body: JSON.stringify({
                pattern_type: type,
                feedback: { helpful: true }
            })
        });

        showToast('Thanks for the feedback! I\'ll use this to improve my suggestions.', 'success');

    } catch (error) {
        console.log('Feedback submission failed');
    }
}

function showPatternInsights() {
    const insightsHtml = `
        <div style="padding: 20px;">
            <h3>Your AI Learning Patterns</h3>
            <p style="color: var(--text-secondary); margin-bottom: 20px;">
                Based on your interactions, I've learned these patterns about how you work best:
            </p>
            <div id="detailedInsights">
                Loading detailed insights...
            </div>
        </div>
    `;

    showModal('Pattern Insights', insightsHtml);
    loadDetailedInsights();
}

async function loadDetailedInsights() {
    try {
        const response = await fetch(`${API_URL}/api/agents/patterns/analyze`, {
            headers: getAuthHeaders()
        });

        const data = await response.json();
        const patterns = data.patterns;

        const insights = [];

        if (patterns.communicationStyle) {
            insights.push(`
                <div style="background: var(--bg-card); padding: 15px; border-radius: 8px; margin-bottom: 10px;">
                    <h4 style="margin-bottom: 8px;">💬 Communication Style</h4>
                    <p>You prefer ${patterns.communicationStyle.prefersBrief ? 'brief, direct communication' :
                                   patterns.communicationStyle.prefersDetailed ? 'detailed, comprehensive responses' :
                                   'balanced communication'}. I adapt my responses accordingly.</p>
                </div>
            `);
        }

        if (patterns.taskCompletion) {
            insights.push(`
                <div style="background: var(--bg-card); padding: 15px; border-radius: 8px; margin-bottom: 10px;">
                    <h4 style="margin-bottom: 8px;">🎯 Task Completion</h4>
                    <p>${patterns.taskCompletion.highCompletionRate ?
                        'You have a strong track record of completing tasks!' :
                        'You\'re building great completion habits.'}
                        ${patterns.taskCompletion.prefersSmallTasks ?
                        'You work best when tasks are broken into smaller steps.' : ''}</p>
                </div>
            `);
        }

        document.getElementById('detailedInsights').innerHTML = insights.join('');

    } catch (error) {
        document.getElementById('detailedInsights').innerHTML =
            '<p>Insights not available yet. Keep using the assistant to build your patterns!</p>';
    }
}

// Enhanced toast for smart notifications
function showSmartToast(message, type = 'info') {
    const colors = {
        smart: '#8B5CF6',
        success: '#10B981',
        error: '#EF4444',
        info: '#3B82F6'
    };

    const toast = document.createElement('div');
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${colors[type] || colors.info};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease;
        max-width: 400px;
    `;

    toast.innerHTML = message;
    document.body.appendChild(toast);

    setTimeout(() => {
        toast.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => document.body.removeChild(toast), 300);
    }, 4000);
}

// Add to CSS
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// Make showToast available globally if it doesn't exist
if (typeof showToast === 'undefined') {
    window.showToast = showSmartToast;
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
checkAppAuth();
initializeApp();

const savedTheme = localStorage.getItem('theme') || 'purple';
setTheme(savedTheme);
});

</script>

</body>
</html>